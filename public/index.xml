<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IndieCoder</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on IndieCoder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Hein Thant</copyright>
    <lastBuildDate>Sat, 11 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About Me</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Sat, 11 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>Hello! I&amp;rsquo;m Hein Thant, a self-taught developer from Myanmar. I build mobile apps, web apps, and half-finished side projects.&#xA;I share my knowledge and thought on this blog. I write about web dev, mobile dev, algorithm, game dev, or anything that comes to my mind actually. I hope you find something useful here.&#xA;I&amp;rsquo;m currently working as a full-time software engineer. I also build side projects and contribute to open-source projects in my free time.</description>
    </item>
    <item>
      <title>Upload Files to AWS S3 from React</title>
      <link>http://localhost:1313/blogs/upload-s3/</link>
      <pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/upload-s3/</guid>
      <description>In this blog, we’ll walk through how to upload images and videos (any files) directly from a React client to an AWS S3 bucket. The main benefit of this approach is reducing the server load since we don&amp;rsquo;t need to upload files to our server. We only need an endpoint to get direct upload access to S3.&#xA;In this app, we have 3 parts to set up:&#xA;Frontend client with a file input field where users can upload files Server endpoint to get signed-URL for giving access to S3 bucket AWS S3 bucket where we can store our files.</description>
    </item>
    <item>
      <title>Custom Theme Switcher Hook in React</title>
      <link>http://localhost:1313/blogs/react-theme-hook/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/react-theme-hook/</guid>
      <description>In this tutorial, I’ll show you how to build a custom theme switcher hook in React. By the end, you’ll have a reusable hook that can add dark/light mode to any React project.&#xA;We’ll cover:&#xA;Creating the hook step-by-step. Saving the user’s theme preference. Adding dark/light mode toggle functionality. Logic Here’s how the custom hook works:&#xA;It checks for a saved theme in local storage. If no saved theme is found, it checks the system’s dark mode preference.</description>
    </item>
  </channel>
</rss>
